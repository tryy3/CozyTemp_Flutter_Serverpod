version: '3.8'

services:
  # Main Serverpod server
  flutter-server:
    image: ghcr.io/tryy3/cozytemp_flutter_serverpod/flutter-server:latest
    container_name: flutter-server
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      # redis:
      #   condition: service_started
    ports:
      - "${API_PORT:-8080}:8080"      # API Server
      - "${INSIGHTS_PORT:-8081}:8081" # Insights Server
      - "${WEB_PORT:-8082}:8082"      # Web Server
    env_file:
      - .env
    environment:
      # API Settings
      - SERVERPOD_API_SERVER_PUBLIC_HOST=${API_HOST:-localhost}
      - SERVERPOD_API_SERVER_PUBLIC_PORT=${PUBLIC_PORT:-8080}
      - SERVERPOD_API_SERVER_PUBLIC_SCHEME=${PUBLIC_SCHEME:-http}
      - SERVERPOD_API_SERVER_PORT=${API_PORT:-8080}

      # Insights Settings
      - SERVERPOD_INSIGHTS_SERVER_PUBLIC_HOST=${INSIGHTS_HOST:-localhost}
      - SERVERPOD_INSIGHTS_SERVER_PUBLIC_PORT=${INSIGHTS_PUBLIC_PORT:-8081}
      - SERVERPOD_INSIGHTS_SERVER_PUBLIC_SCHEME=${PUBLIC_SCHEME:-http}
      - SERVERPOD_INSIGHTS_SERVER_PORT=${INSIGHTS_PORT:-8081}

      # Web Settings
      - SERVERPOD_WEB_SERVER_PUBLIC_HOST=${WEB_HOST:-localhost}
      - SERVERPOD_WEB_SERVER_PUBLIC_PORT=${WEB_PUBLIC_PORT:-8082}
      - SERVERPOD_WEB_SERVER_PUBLIC_SCHEME=${PUBLIC_SCHEME:-http}
      - SERVERPOD_WEB_SERVER_PORT=${WEB_PORT:-8082}
      
      # Database configuration
      - SERVERPOD_DATABASE_HOST=postgres
      - SERVERPOD_DATABASE_PORT=5432
      - SERVERPOD_DATABASE_NAME=${POSTGRES_DB:-flutter_server}
      - SERVERPOD_DATABASE_USER=${POSTGRES_USER:-postgres}
      - SERVERPOD_DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - SERVERPOD_DATABASE_REQUIRE_SSL=${DB_REQUIRE_SSL:-false}
      
      # Redis configuration
      - REDIS_ENABLED=${REDIS_ENABLED:-true}
      - REDIS_HOST=redis
      - REDIS_PORT_INTERNAL=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_REQUIRE_SSL=${REDIS_REQUIRE_SSL:-false}
      
      # Service secret
      - SERVERPOD_SERVICE_SECRET=${SERVICE_SECRET}
      
      # Optional settings
      - SERVERPOD_MAX_REQUEST_SIZE=${MAX_REQUEST_SIZE:-524288}
      - SERVERPOD_SESSION_LOGS_PERSISTENT_ENABLED=${SESSION_LOGS_PERSISTENT:-true}
      - SERVERPOD_SESSION_LOGS_CONSOLE_ENABLED=${SESSION_LOGS_CONSOLE:-true}
      - SERVERPOD_SESSION_LOGS_CONSOLE_LOG_FORMAT=${SESSION_LOGS_FORMAT:-json}

    command:
      [
        "--mode",
        "production",
        "--server-id",
        "default",
        "--logging",
        "normal",
        "--role",
        "monolith",
        "--apply-migrations",
      ]
    
    networks:
      - serverpod-network
    # healthcheck:
    #   test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 40s

  # PostgreSQL database with pgvector extension
  postgres:
    image: postgres:17
    container_name: postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-flutter_server}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - serverpod-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-flutter_server}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache
  # redis:
  #   image: redis:6.2.6-alpine
  #   container_name: redis
  #   restart: unless-stopped
  #   ports:
  #     - "${REDIS_PORT:-6379}:6379"
  #   command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - serverpod-network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

volumes:
  postgres_data:
    driver: local
  # redis_data:
  #   driver: local

networks:
  serverpod-network:
    driver: bridge

